class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
    # Create hash table to record which row, col, 
    # grid already has certain number exsits
        R = {}
        for i in range(9):
            R[i] = []

        C = {}
        for i in range(9):
            C[i] = []

        G = {}
        for i in range(1,10):
            G[f"Grid{i}"] = []

        Position_Grid = {}

        #Helper Functions
        def MakePositionGrid(R,C,NumGrid):
            Position_Grid[f"Grid{NumGrid}"] = []
            for i in range(0,3):
                for j in range(0,3):
                    NewR = R + i
                    NewC = C + j
                    Position_Grid[f"Grid{NumGrid}"].append((NewR,NewC))

        original_point = []
        count = 1
        for i in range(0,7,3):
            for j in range(0,7,3):
                temp = []
                temp.append(i)
                temp.append(j)
                temp.append(count)
                count += 1
                original_point.append(temp)

        for i in original_point:
            MakePositionGrid(i[0],i[1],i[2])

        def GridLocate(i,j):
            for key,value in Position_Grid.items():
                if (i,j) in value:
                    return key


        for i in range(len(board)):
            for j in range(len(board[i])):
                val = board[i][j]
                if val != ".":
                    if not val in R[i]:
                        R[i].append(val)
                    else:
                        return False
                    if not val in C[j]:
                        C[j].append(val)
                    else:
                        return False
                    if val not in G[GridLocate(i,j)]:
                        G[GridLocate(i,j)].append(val)
                    else:
                        return False
        return True

           
